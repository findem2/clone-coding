name: Deploy React to EC2

on:
  # ~ 했을때
  push:
    # push했을때
    branches:
      # 브런치에
      - develop
      # develop 브런치에

jobs:
  # 해야 할 일 목록.
  deploy_front:
    #  프론트 배포
    runs-on: ubuntu-latest
    #  최신 Ubuntu 버전

    steps:
      # 작업 순서

      - name: checkout repository
        # 리포지토리 체크아웃
        uses: actions/checkout@v4
        # 깃액션에 있는 checkout(v4)을 사용

      - name: Add SSH key
        # SSH 키 추가
        uses: webfactory/ssh-agent@v0.5.4
        # webfactory의 ssh-agent(v0.5.4)을 사용
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}
          # 시크릿으로 저장된 EC2_KEY를 비공개 SSH 키 추가

      - name: Ensure SSH directory exists
        # 원격접속기 디렉토리 생성
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
        # 디렉토리가 없으면 생성하고,권한을 700으로 설정

      - name: Add SSH known hosts
        #  원격 접속기known_hosts 파일에 EC2 호스트 추가
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        # EC2 호스트를 known_hosts 파일에 추가

      - name: Install Dependencies of Front
        #  프론트엔드의 의존성 설치
        working-directory: ./
        # 작업 디렉토리 : ./query-test
        run: npm i
        # npm 설치

      - name: Build Front
        #  프론트 빌드
        working-directory: ./
        # 작업 디렉토리: ./query-test
        run: npm run build
        # npm 빌드 실행

      - name: Copy Files to EC2
        # 파일을 EC2로 복사
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            rm -rf /var/www/html
            mkdir /var/www/html'
          rsync -avz -e "ssh" ./build/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/html
        # 원격접속기로 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}서버에 /var/www/front위치 있는걸 삭제하고 새로 생성
        # rsync를 사용하여 ./query-test/build/ 폴더를 EC2 유저로 EC2 인스턴스(HOST)에 접속해서 /var/www/html 폴더에 복사해달라.
